# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Staging Deploy to Amazon ECS

on:
  push:
    branches:
      - develop

env:
  AWS_REGION: ap-southeast-1                          # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ebs-api-test                        # set this to your Amazon ECR repository name
  ECS_SERVICE: ebs-api-skynet-stg                    # set this to your Amazon ECS service name
  ECS_CLUSTER: DevCluster                             # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition-stg.json  # set this to the path to your Amazon ECS task definition
                                                      # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: ebs-api-skynet-test                 # set this to the name of the container in the
                                                      # containerDefinitions section of your task definition
  API_HOST: ${{ vars.API_HOST }}
  API_SECRET: ${{ secrets.API_SECRET }}
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Setup Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          bun install
      - name: Build and Test
        run: |
          ls -al
          bun -v
          bunx nx build api
          bunx nx test api
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ASSUME_ROLE }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
  mobile_debug_build:
    name: Mobile app debug build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
      - uses: actions/setup-node@v3
      - name: Setup Firebase
        uses: w9jds/setup-firebase@main
        with:
          gcp_sa_key: ${{ env.GCP_SA_KEY }}
          firebase_token: ${{ env.FIREBASE_TOKEN }}
      - name: Check Firebase CLI installation
        run: firebase -V
      - name: Configure .env
        run: |
          cd apps/mobile/
          cat << EOF > .env
          API_HOST=${{ env.API_HOST }}
          API_SECRET=${{ env.API_SECRET }}
          EOF
      - name: Setup Flutterfire
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.29.3
      - run: |
          cd apps/mobile/
          echo ${{ env.FIREBASE_PROJECT_ID }} > .firebaserc
          ls -al
          dart pub global activate flutterfire_cli
          flutterfire --version
          flutterfire configure -y -p ${{ env.FIREBASE_PROJECT_ID }} -t ${{ env.FIREBASE_TOKEN }} --platforms="android"
          ls -al
      - name: Install -> Build -> Test app
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.29.3
      - run: |
          cd apps/mobile/
          ls -al
          flutter --version
          flutter pub get
          flutter test
          flutter build apk
          # flutter build aab