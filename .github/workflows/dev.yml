# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Staging Build

on:
  push:
    branches:
      - develop

env:
  AWS_REGION: ap-southeast-1                          # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ebs-api-test                        # set this to your Amazon ECR repository name
  ECS_SERVICE: ebs-api-skynet-stg                    # set this to your Amazon ECS service name
  ECS_CLUSTER: DevCluster                             # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition-stg.json  # set this to the path to your Amazon ECS task definition
                                                      # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: ebs-api-skynet-test                 # set this to the name of the container in the
                                                      # containerDefinitions section of your task definition
  API_HOST: ${{ vars.API_HOST }}
  API_SECRET: ${{ secrets.API_SECRET }}
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
  ADMIN_SDK_CREDENTIALS: ${{ secrets.ADMIN_SDK_CREDENTIALS }}
  FIREBASE_AUTH_EMULATOR_HOST: "127.0.0.1:9099"
  REDIS_HOST: "redis://localhost:6379"
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  app_preview_deploy:
    name: Deploy Web App to Vercel
    runs-on: ubuntu-latest
    environment: staging
    env:
      FBASE_API_KEY: ${{ secrets.FBASE_API_KEY }}
      FBASE_AUTH_DOMAIN: ${{ secrets.FBASE_AUTH_DOMAIN }}
      FBASE_PROJECT_ID: ${{ secrets.FBASE_PROJECT_ID }}
      FBASE_STORAGE_BUCKET: ${{ secrets.FBASE_STORAGE_BUCKET }}
      FBASE_MESSAGING_SENDER_ID: ${{ secrets.FBASE_MESSAGING_SENDER_ID }}
      FBASE_APP_ID: ${{ secrets.FBASE_APP_ID }}
    needs: api_staging_deploy
    steps:
      - uses: actions/checkout@v2
      - name: Configure Firebase Service Worker
        run: |
          cd apps/ebs-app
          chmod +x ./firebase-sw-config.sh
          ./firebase-sw-config.sh ${{ env.FBASE_API_KEY }} ${{ env.FBASE_PROJECT_ID }} ${{ env.FBASE_MESSAGING_SENDER_ID }} ${{ env.FBASE_APP_ID }}
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
      - run: bun install
      - name: Install Vercel CLI
        run: bun install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  api_staging_deploy:
    name: Build Test Deploy
    runs-on: ubuntu-latest
    environment: staging
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the env for postgres
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 6379:6379
      stripe:
        image: stripe/stripe-mock:latest
        ports:
          - 12111-12112:12111-12112
      firebase:
        image: andreysenov/firebase-tools
        ports:
          - 9099:9099

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
      - run: bun install
      - name: Configure .env
        run: |
          cd apps/api/
          cat << EOF > .env
          APP_HOST=http://localhost:3000
          API_SECRET=secret
          JWT_SECRET=secret
          EOF
          ls -al
          cat .env
      - name: Setup Firebase
        uses: w9jds/setup-firebase@main
        with:
          gcp_sa_key: ${{ env.GCP_SA_KEY }}
          firebase_token: ${{ env.FIREBASE_TOKEN }}
      # Install the Firebase Emulator Suite
      - name: Start Firebase Emulator Suite
        uses: invertase/firebase-emulator-action@main
        with:
          # The version of the Firebase CLI to install, (`npm install -g firebase-tools@${firebase-tools-version}`)
          firebase-tools-version: 'latest'

          # A comma separated list of emulators to start.
          emulators: 'auth'

          # The project ID to use, defaults to 'test-project'.
          project-id: ${{ env.FIREBASE_PROJECT_ID }}

          # The maximum number of retries to attempt before failing the action, defaults to 3.
          max-retries: '3'

          # The maximum number of checks to perform before failing the retry, defaults to 60.
          max-checks: '60'

          # The time to wait between checks in seconds, defaults to 1.
          wait-time: '1'

          # The port to check for the emulators, defaults to 9099 (Cloud Firestore). Change this if you are using specific emulators. See https://firebase.google.com/docs/emulator-suite/install_and_configure#port_configuration.
          check-port: '9099'
      - name: Install Module Dependencies
        run: |
          cd apps/api/
          go mod tidy
          go mod download
          go mod verify
      - name: Get credentials
        run: |
          base64 -d <<< ${{ env.ADMIN_SDK_CREDENTIALS }} > admin-sdk-credentials.json
          cp ./admin-sdk-credentials.json apps/api/src
      - name: Test api
        run: GOOGLE_APPLICATION_CREDENTIALS=./admin-sdk-credentials.json GIN_MODE=release bunx nx test api
      - name: Build api
        run: GOOGLE_APPLICATION_CREDENTIALS=./admin-sdk-credentials.json GIN_MODE=release bunx nx build api
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ASSUME_ROLE }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
  mobile_debug_build:
    name: Build and Test mobile app
    runs-on: ubuntu-latest
    environment: staging
    needs: api_staging_deploy
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
      - uses: actions/setup-node@v3
      - name: Setup Firebase
        uses: w9jds/setup-firebase@main
        with:
          gcp_sa_key: ${{ env.GCP_SA_KEY }}
          firebase_token: ${{ env.FIREBASE_TOKEN }}
      - name: Check Firebase CLI installation
        run: firebase -V
      - name: Configure .env
        run: |
          cd apps/mobile/
          cat << EOF > .env
          API_HOST=${{ env.API_HOST }}
          API_SECRET=${{ env.API_SECRET }}
          EOF
      - name: Setup Flutterfire
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.29.3
      - name: Setup Flutterfire
        run: |
          cd apps/mobile/
          echo ${{ env.FIREBASE_PROJECT_ID }} > .firebaserc
          ls -al
          dart pub global activate flutterfire_cli
          flutterfire --version
          flutterfire configure -y -p ${{ env.FIREBASE_PROJECT_ID }} -t ${{ env.FIREBASE_TOKEN }} --platforms="android"
          ls -al
      - name: Install -> Build -> Test app
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.29.3
      - run: |
          cd apps/mobile/
          ls -al
          flutter --version
          flutter pub get
          flutter test
          flutter build apk
          # flutter build aab